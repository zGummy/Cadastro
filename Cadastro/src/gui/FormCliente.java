
package gui;

import bd.BancoDados;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import model.Cliente;



public class FormCliente extends javax.swing.JFrame
        implements TableModelListener {
    
    /**
     * Creates new form FormClientes
     */
    public FormCliente(FormMain formMain) {
        initComponents();
        
        this.formMain = formMain;
        
        this.formMain = formMain;
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        
        tblClientes.getModel().addTableModelListener(this);
        
        clientesPesquisa = new ArrayList<>();
        
        sincronizaTabela();
    }
    
    
    public void sincronizaTabela() {
        // Carregar a lista de editoras na tabela
        DefaultTableModel model = 
                (DefaultTableModel) tblClientes.getModel();
        
         // Reseta o modelo da tabela
        model.setRowCount(0);
        
        SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
        
        for (Cliente cliente : clientesPesquisa) {
            Object[] linha = {cliente.getId(), 
                cliente.getNome(),
                formatador.format(cliente.getDataNascimento().getTime()),
                cliente.getCpf(),
                cliente.getDataCadastro()};
            
            model.addRow(linha);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        btnCadastrar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtDtNasc = new javax.swing.JTextField();
        txtCpf = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtDtCadastro = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtPesquisaCodigo = new javax.swing.JTextField();
        txtPesquisaNome = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cadastro"));

        jLabel1.setText("Nome:");

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        jLabel4.setText("Dt. nasc.:");

        jLabel7.setText("CPF:");

        jLabel8.setText("Dt. cadastro:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNome)
                            .addComponent(txtCpf)
                            .addComponent(txtDtNasc)
                            .addComponent(txtDtCadastro))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDtNasc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtDtCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Pesquisa"));

        jLabel2.setText("Código:");

        jLabel3.setText("Nome:");

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Dt. Nascimento", "Cpf", "Dt. DataDeCadastro"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblClientesKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblClientes);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisaCodigo))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtPesquisaNome)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPesquisaCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPesquisaNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        formMain.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        
        try {
            Cliente ultimoCliente = BancoDados.listaClientes.get(
                    BancoDados.listaClientes.size() - 1);
            
            SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
            
            Integer proximoId = ultimoCliente.getId() + 1;
            
            String nomeCliente = txtNome.getText();
            
            GregorianCalendar dataNascimento = new GregorianCalendar();
            GregorianCalendar dataCadastro = new GregorianCalendar();
            
            dataNascimento.setTime(formatador.parse(txtDtNasc.getText()));
            dataCadastro.setTime(formatador.parse(txtDtCadastro.getText()));
            
            String cpf = txtCpf.getText();
            
            //Long telefone = Long.parseLong(txtTelefone.getText());
            
            Cliente cliente = new Cliente(proximoId,
                    nomeCliente,
                    dataNascimento,
                    cpf,
                    dataCadastro);
            
            BancoDados.listaClientes.add(cliente);
            
            JOptionPane.showMessageDialog(null,
                    "Registro cadastrado com sucesso.");
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null,
                    "Formato de data inválido.");
        }
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
                // Verificar critérios de pesquisa
        if (!txtPesquisaCodigo.getText().isEmpty()) {
            
            Integer idPesquisa = Integer.parseInt(
                txtPesquisaCodigo.getText());
            
            Cliente cliente = BancoDados.buscaClientePorId(idPesquisa);
                       
            if (cliente == null) {
                JOptionPane.showMessageDialog(null,
                        "Nenhum registro encontrado.");
            } else {
                clientesPesquisa = new ArrayList<>();
                clientesPesquisa.add(cliente);
            }
            
            sincronizaTabela();
            
        } else if (!txtPesquisaNome.getText().isEmpty()) {
            
            String nomePesquisa = txtPesquisaNome.getText();
            
            clientesPesquisa = 
                    BancoDados.buscaClientePorNome(nomePesquisa);
            
            if (clientesPesquisa.isEmpty()) {
                JOptionPane.showMessageDialog(null,
                        "Nenhum registro encontrado.");
            }
            
            sincronizaTabela();
            
        } else {
            JOptionPane.showMessageDialog(null, 
                    "É necessário informar o código ou o nome.");
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void tblClientesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblClientesKeyPressed
        if (evt.getKeyCode() == 127) {

            if (tblClientes.getSelectedRowCount() != 1) {
                JOptionPane.showMessageDialog(null,
                    "É necessário selecionar 1 registro apenas");
                return;
            }

            int opcao = JOptionPane.showConfirmDialog(null,
                "Deseja realmente excluir o registro?");

            if (opcao == JOptionPane.YES_OPTION) {

                int linhaSelecionada = tblClientes.getSelectedRow();

                Integer id = (Integer) tblClientes.getModel()
                .getValueAt(linhaSelecionada, 0);

                BancoDados.deleteCliente(id);

                // Remove o cliente da pesquisa
                for (Cliente cliente : clientesPesquisa) {
                    if (cliente.getId().equals(id)) {
                        clientesPesquisa.remove(cliente);
                        break;
                    }
                }

                sincronizaTabela();

            }

        }
    }//GEN-LAST:event_tblClientesKeyPressed

    private FormMain formMain;
    
    // Lista de editoras pesquisadas
    private List<Cliente> clientesPesquisa;
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblClientes;
    private javax.swing.JTextField txtCpf;
    private javax.swing.JTextField txtDtCadastro;
    private javax.swing.JTextField txtDtNasc;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtPesquisaCodigo;
    private javax.swing.JTextField txtPesquisaNome;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent tme) {
        if (tme.getType() == TableModelEvent.UPDATE) {
            try {
                int linhaAlterada = tme.getFirstRow();
                
                SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
                
                // Recupera as informações de alteração
                Integer id = (Integer) tblClientes.getModel()
                        .getValueAt(linhaAlterada, 0);
                
                String nome = (String) tblClientes.getModel()
                        .getValueAt(linhaAlterada, 1);
                
                GregorianCalendar dataNascimento = new GregorianCalendar();
                GregorianCalendar dataCadastro = new GregorianCalendar();
                
                dataNascimento.setTime(formatador.parse((String) tblClientes.getModel()
                        .getValueAt(linhaAlterada, 2)));
                
                String cpf = (String) tblClientes.getModel()
                        .getValueAt(linhaAlterada, 3);
                
                 dataCadastro.setTime(formatador.parse((String) tblClientes.getModel()
                        .getValueAt(linhaAlterada, 4)));
                
                
                
               // Long telefone = (Long) tblClientes.getModel().getValueAt(linhaAlterada, 4);
                
                BancoDados.updateCliente(id, nome, dataNascimento, cpf, dataCadastro);
            } catch (ParseException ex) {
                Logger.getLogger(FormCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }

    
}
